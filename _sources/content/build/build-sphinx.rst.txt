==========================
Sphinxでドキュメントビルド
==========================


.. meta::

   :keywords: Sphinx,入門,実践入門,reStructuredText,変換,Makefile,Org-mode,原稿,執筆
   :description: Sphinxでドキュメントをビルドしてウェブサイトを作成し、EmacsのOrg-modeでドキュメントを編集します。

　本章では、Sphinxの基本的な使い方を学びます。
Sphinxでプロジェクトを開始し、ビルドして成果物(HTML)ができるまでの一連の流れをまとめます。見栄えのよいHTMLが簡単に作成できることをを体験しましょう。

　ドキュメントにおいて、最も大事なのはコンテンツだと考えます。読み手にとって必要な情報が、分かりやすく正確に記載されていることが大事です。コンテンツを効率的に作成する作業するために、エディタにもこだわった結果、Emacsを利用するようになりました。

　そこで出会ったOrg-modeが素晴らしく、もはや、Org-modeがあるから、Emacsを使用していると言っても過言ではないほどお世話になっています。
Org-modeを利用することで、ドキュメントを構造的に把握し、原稿を体系的に整理することができます。

Sphnixの概要
============

　`Sphinx <http://www.sphinx-doc.org/en/stable/>`__\ とはドキュメントを作成するPython製のツールです。何がうれしいのかを、以下にまとめてみます。

-  知的で美しいドキュメントを簡単に作成できること

   -  出力形式: HTML ・ PDF (LaTeX を使用) ・ ePub
   -  (インデックス等を自動で作成できる)

-  Python 製ドキュメンテーション作成ツールとして実績があること

   -  reStructuredText の文書をドキュメンテーションに変換できる
   -  (Python の公式ドキュメントも採用)

-  設定やデザインを記事と完全に独立できること

   -  記事作成時に細かいデザインを気にしなくてよい
   -  (レスポンシブに対応したデザインも多数存在)

Sphinxのプロジェクト作成
========================

コマンドライン方式による新規プロジェクト作成
--------------------------------------------

　コマンドラインで sphinx のプロジェクトを作成できる方法を紹介します。

.. code-block:: bash

   project_name="effective-sphinx"
   auther="masatotoro"
   sphinx-quickstart \
     --quiet \
     --project=${project_name} \
     --author=${auther} \
     --language=ja \
     -v 1.0.0 \
     --ext-todo \
     --no-batchfile

作成された新規プロジェクトの中身確認
------------------------------------

Spninxのプロジェクトをビルド
============================

Sphinx でウェブサイトの作成
---------------------------

Sphinx でプロジェクトを作成すると Makefile
が生成されています。以下のコマンドを実行して、Sphinx で HTML
ファイルが出力します。

.. code-block:: bash

   make html

Sphinx で作成されたウェブサイトを確認
-------------------------------------

何も設定を行っていないウェブサイトです。

ウェブサイトのデザイン変更
==========================

デザインを変更しないとテンションが上がらないため、最近よく見かけるようになった
Read the Doc のデザインを適用します。

利用するテンプレート情報
------------------------

-  https://github.com/rtfd/sphinx_rtd_theme
-  https://pypi.python.org/pypi/sphinx_rtd_theme

sphinx\_bootstrap\_theme
------------------------

-  sphinx\_bootstrap\_theme をインストール

.. code-block:: bash

   sudo -H pip install sphinx_rtd_theme

conf.py の変更
--------------

.. code:: python

   html_theme = "sphinx_rtd_theme"

Sphinxの課題と対応方針
======================

この章で見てきたように、Sphinx
はとても簡単にウェブサイトが作成することができます。またデザインに関しても、ライブラリを入れて設定を行うことでいい感じになります。

Sphinx の問題点は、rst (reStructuredText)
のフォーマットを覚えなければいけないことです。次の章では、その問題を回避するために
Emacs の org-mode を利用することを提案します。 (markdown
に対して強い思い入れがある方は markdown を利用してください)

Org-modeの概要
==============

Org-Mode を一言で表現すると、以下になります。

-  "高速で効率的なプレーンテキストのシステム"

プレーンテキストで記載しておくと、様々なプラットフォームでも編集を行うことができます。Dropbox
などで同期すると、その利便性はさらに向上すると思います。

Org-mode は GTD
などのタスク管理や、体系的なドキュメント作成と相性がよいです。ここでは、ウェブサイト用のコンテンツを作成する視点で、Org-mode
の便利な機能を厳選してまとめます。紹介する内容は Org-mode
の機能の一部にすぎませんので、興味のある方は、ぜひ使いこんで理解を深めてください。

Org-mode の公式サイト
---------------------

-  http://orgmode.org/ja/

Org-mode の嬉しいところ
-----------------------

使用して嬉しいと感じる理由は以下の３つです。

-  テキストデータなので軽量であること
-  文章の構造を意識して記事作成ができること
-  作成した記事の活用できる幅が広いこと

サイトの記事を作成する際のフォーマットは Org-mode で統一します。

Org-mode でやりたいこと
-----------------------

-  Emacs の org-mode を用いてファイルを変更

   -  Goemon によるリアルタイムプレビュ

Org-modeで可能な表現の整理
==========================

ウェブサイト作成を想定した場合に使用する Org-mode
の記法を整理します。複雑なことを行わないことがポイントになります。早速、順番に確認していきましょう。

メタタグ指定
------------

SEO 的に、やって置いた方が良さそうなので、メタタグ追記

::

   :keywords: キーワード
   :description: 説明文

参考情報
~~~~~~~~

-  http://bacchus.ivory.ne.jp/vodka/doc/sphinx-meta.html

見出し
------

-  ルール

   -  記号: 「*」
   -  階層: 3 つまで

見出し階層の２つまでを用いて目次として出力する。そのため見出しの文字列が重複しないようにすること。

箇条書き
--------

-  ルール

   -  記号: 「-」
   -  階層: 3 つまで

本文
----

-  本文

   -  行の途中で改行しない

数式
----

.. math::

   E = m c^2

.. math::

   y = \sin x

.. math::

   f(x) = \sum_{i=0}^n x_i

図
--

図の表示サンプル

.. figure:: ../../_static/sphinx.png
   :alt: 画像の挿入

   画像の挿入

表
--

============ ==============
Key の見出し Value の見出し
============ ==============
key1         Value1
key2         Value2
============ ==============

ソースコード
------------

ソースコードの表示サンプル

Bash の場合
~~~~~~~~~~~

.. code-block:: bash

   echo "Hello Bash!!"

Ruby の場合
~~~~~~~~~~~

.. code:: ruby

   puts "Hello World";

Python の場合
~~~~~~~~~~~~~

.. code:: python

   print ("Hello World");

UML
---

ソフトウェアを嗜む場合は、UML が記述できると嬉しいかと思います。

Org-mode でも Sphinx でも plantuml を利用することが可能です。

注釈
----

注釈の表示サンプル

.. note::

   注釈です

.. warning::

   警告です！

.. todo::

   課題です！
